{"version":3,"sources":["components/ColorPicker/ColorPicker.js","App.js","reportWebVitals.js","index.js"],"names":["ColorPicker","state","activeOptionIdx","setActiveIdx","index","setState","makeOptionClasses","optionClasses","push","join","this","options","props","label","className","map","color","style","backgroundColor","onClick","Component","colorPickerOptions","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0QAkDeA,G,kNA9CbC,MAAQ,CACNC,gBAAiB,G,EAGnBC,aAAe,SAAAC,GACb,EAAKC,SAAS,CAAEH,gBAAiBE,K,EAGnCE,kBAAoB,SAAAF,GAClB,IAAMG,EAAgB,CAAC,uBAMvB,OAJIH,IAAU,EAAKH,MAAMC,iBACvBK,EAAcC,KAAK,+BAGdD,EAAcE,KAAK,M,uDAGlB,IAAD,OACCP,EAAoBQ,KAAKT,MAAzBC,gBACAS,EAAYD,KAAKE,MAAjBD,QACAE,EAAUF,EAAQT,GAAlBW,MAER,OACE,sBAAKC,UAAU,cAAf,UACE,oBAAIA,UAAU,qBAAd,0BACA,gGAAiBD,KACjB,8BACGF,EAAQI,KAAI,WAAmBX,GAAW,IAA3BS,EAA0B,EAA1BA,MAAOG,EAAmB,EAAnBA,MACrB,OACE,wBAEEF,UAAW,EAAKR,kBAAkBF,GAClCa,MAAO,CAAEC,gBAAiBF,GAC1BG,QAAS,WACP,EAAKhB,aAAaC,KAJfS,e,GAhCKO,cCGpBC,EAAqB,CACzB,CAAER,MAAO,MAAOG,MAAO,WACvB,CAAEH,MAAO,QAASG,MAAO,WACzB,CAAEH,MAAO,OAAQG,MAAO,WACxB,CAAEH,MAAO,OAAQG,MAAO,WACxB,CAAEH,MAAO,OAAQG,MAAO,WACxB,CAAEH,MAAO,SAAUG,MAAO,YAcbM,MAXf,WACE,OACE,qCACE,qJAGA,cAAC,EAAD,CAAaX,QAASU,QCTbE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.a6d0f991.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './ColorPicker.css';\r\n\r\nclass ColorPicker extends Component {\r\n  state = {\r\n    activeOptionIdx: 0,\r\n  };\r\n\r\n  setActiveIdx = index => {\r\n    this.setState({ activeOptionIdx: index });\r\n  };\r\n\r\n  makeOptionClasses = index => {\r\n    const optionClasses = ['ColorPicker__option'];\r\n\r\n    if (index === this.state.activeOptionIdx) {\r\n      optionClasses.push('ColorPicker__option--active');\r\n    }\r\n\r\n    return optionClasses.join(' ');\r\n  };\r\n\r\n  render() {\r\n    const { activeOptionIdx } = this.state;\r\n    const { options } = this.props;\r\n    const { label } = options[activeOptionIdx];\r\n\r\n    return (\r\n      <div className=\"ColorPicker\">\r\n        <h2 className=\"ColorPicker__title\">Color Picker</h2>\r\n        <p>Выбран цвет: {label}</p>\r\n        <div>\r\n          {options.map(({ label, color }, index) => {\r\n            return (\r\n              <button\r\n                key={label}\r\n                className={this.makeOptionClasses(index)}\r\n                style={{ backgroundColor: color }}\r\n                onClick={() => {\r\n                  this.setActiveIdx(index);\r\n                }}\r\n              ></button>\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ColorPicker;\r\n","// import Counter from './components/Counter';\r\n// import Counter from './components/Dropdown';\r\nimport './App.css';\r\n// import Dropdown from './components/Dropdown';\r\nimport ColorPicker from './components/ColorPicker';\r\n\r\nconst colorPickerOptions = [\r\n  { label: 'red', color: '#F44336' },\r\n  { label: 'green', color: '#4CAF50' },\r\n  { label: 'blue', color: '#2196F3' },\r\n  { label: 'grey', color: '#607D8B' },\r\n  { label: 'pink', color: '#E91E63' },\r\n  { label: 'indigo', color: '#3F51B5' },\r\n];\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n      <h1>Состояние компонента</h1>\r\n      {/* <Counter /> */}\r\n      {/* <Dropdown /> */}\r\n      <ColorPicker options={colorPickerOptions} />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}